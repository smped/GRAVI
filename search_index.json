[["index.html", "GRAVI User Guide (Under Development) Chapter 1 Introduction", " GRAVI User Guide (Under Development) Stephen Pederson 2022-05-05 Chapter 1 Introduction This book is the primary documentation for running the GRAVI (Gene Regulatory Analysis using Variable Inputs) workflow. This workflow is managed using snakemake for running locally or on any HPC, and is designed to minimally take one ChIP target under at least two conditions. There is no theoretical upper limit to the number of ChIP targets which can be analysed, although the practicalities of interpretation will dictate this. In addition to \\(\\geq 1\\) ChIP targets, optional input includes: Results from a single RNA-Seq experiment Any type of genomic feature derived or obtained externally (*gtf) HiC Interactions (*.bedpe) Additional coverage tracks for visualisation, such as those produced by key histone marks (*bigwig) The GRAVI workflow itself will Annotate the genome using a custom, transcript-focussed approach Identify peaks using macs2 callpeak Perform differential binding analysis for each ChIP target &amp; requested comparisons Compare differential binding results across ChIP targets or samples (Pair-wise comparisons) Perform enrichment analyses at all steps of the workflow TO BE COMPLETED: Perform motif analysis based on key binding patterns within and across ChIP targets Add key output files to any local git repository The primary output is a series of html pages generated from rmarkdown files, along with key figures and tables able to be shared amongst collaborators and incorporated directly into publications. "],["workflow.html", "Chapter 2 Workflow Description 2.1 Annotation Setup 2.2 Peak Calling 2.3 Differential Binding 2.4 Pairwise Comparisons", " Chapter 2 Workflow Description The GRAVI workflow performs multiple steps, most of which depend on those conducted previously. The workflow management software snakemake(Mölder et al. 2021) is used to run the complete workflow, giving the capacity to be run on local servers or HPC systems. The snakemake DAG (directed acyclic graph) of the workflow is always included in the compiled document, however a simplified version is presented below. Figure 2.1: Simplified DAG of the GRAVI workflow. Key steps are numbered and shown in black. Inputs are shown in blue, whilst key outputs are shown in coral. The workflow produces a series of HTML reports as a larger webpage, inspired by the excellent workflowr(Blischak, Carbonetto, and Stephens 2019) package but instead relying directly on rmarkdown::render_site()(Allaire et al. 2022). The compiled html pages will be placed in the docs directory, with all source rmarkdown files being placed in the analysis directory. Key additional outputs (e.g. bed/csv files) are placed in the output directory. The standardised directory layout is shown in Section 4.1. The complete R environment from every compiled HTML page is also saved in output/envs 2.1 Annotation Setup Genomic Regions Defining genomic regions is a key part of the setup for analysis. Under the GRAVI workflow, a series of non-overlapping genomic regions are defined which characterise the most likely role/aspect for each specific region. As these will be unique to each Gencode build, and also include any optional RNA-Seq data, this step is performed for every experiment. However, it is a very time-consuming step and speeding up the process is an area of active development. Promoters: By default these are defined as -1500/+500bp from every distinct TSS. If promoters from two or more transcripts overlap, they are merged into a single promoter. These ranges can be easily changed to increase or decrease the size using the YAML as described in Section 5.3 Upstream Promoters: These are extended promoter regions up to 5kb upstream by default, which again can be changed to suit Exons are defined as any exon not overlapping a promoter or upstream promoter Introns are defined as any transcribed sequence not overlapping a promoter, upstream promoter or exon Intergenic Regions: are divided into two subsets, neither of which are permitted to overlap any previously defined regions Within 10kb of a gene. Again this distance is customisable Beyond 10kb of a gene. During the characterisation of all the above regions, mappings to associated genes and transcripts is retained and included in the subsequent GenomicRanges object. An additional mcols field (detected) is included in this object which indicates if any of the mapped genes are detected within any provided RNA-Seq data. Other Steps Additional steps performed during preparation of the annotations are to ensure that all external features, treatment groups and defined genomic regions have colours assigned, which will then propagate through the workflow for consistency of visualisation. External features and/or HiC data is summarised if provided and the association between these datasets and defined genomic regions is also provided as part of the output. ENCODE blacklisted regions are also obtained and prepared for exclusion through the workflow. 2.2 Peak Calling This section of the workflow uses macs2 callpeak(Zhang et al. 2008) with default parameters. Peaks are called on each individual sample and by merging samples within treatment groups for each provided ChIP target. One summary report will be produced each ChIP target specified in the target column of samples.tsv, which will assess all treatments within a ChIP target. Quality Assessment Basic QC statistics such as Library Size, Read Lengths, Total Detected Peaks and Fraction Of Reads In Peaks (FRIP) are provided in tabular and visual form. Plots showing sample-specific GC content and Cross Correlations are also provided to enable visual identification of any outlier samples which can be excluded manually, or handled in any other suitable manner. Taking the best sample from each treatment group (i.e. the one with the largest number of peaks, \\(n_\\text{max}\\)), low quality samples can be automatically excluded if failing to capture \\(&gt; p_\\text{peaks} * n_\\text{max}\\) peaks, where \\(p_\\text{peaks}\\) represents the minimum acceptable proportion of peaks obtained in the best sample (\\(n_\\text{max}\\)). The value \\(p_\\text{peaks}\\) can be defined in config.yml as the parameter min_prop_peaks (Section 5.1) and setting this to zero will ensure all samples are included. This can be particularly useful when dealing with difficult biological source material such as tissue samples or organoids, as opposed to cell lines where consistent results are more common. Results Oracle Peaks: During this step of the workflow a set of treatment-specific oracle peaks will be produced for each ChIP target. The set of peaks obtained by merging samples will be compared to all individual samples, and only those peaks identified in at least \\(100*p_\\text{reps}\\%\\) of the samples which passed QC will be included in the set of oracle peaks. This parameter can be set in config.yml as the parameter min_prop_reps (Section 5.1) with the default of 0.3 indicating that peaks must be detected in 1 or more samples (if N = 2,3), two or more samples (if N = 4, 5) etc. Consensus Peaks: After defining the treatment-specific oracle peaks, these are combined to define the set of consensus peaks. Oracle peaks are merged across conditions in an inclusive manner, such the the range of each consensus peak encompasses the entire region covered by all overlapping oracle peaks. Consensus peaks are then used as the ‘universe’ of peaks against which treatment-specific behaviours are compared. Peaks overlapping a blacklisted region are excluded at all steps of the analysis. The final HTML report produced for each target will contain: A Venn Diagram showing the overlap in consensus peaks and whether one or more oracle peaks overlaps the consensus peak. In the case of 4 or more treatments, an UpSet plot(Conway, Lex, and Gehlenborg 2017) will be produced instead Distance to TSS plots as actual and cumulative distributions using consensus peaks. A pie chart describing the distribution of consensus peaks within the genomic regions defined previously Additional plots will be produced in the presence of external data The distribution of consensus peaks which directly overlap a detected gene will be shown separated by genomic region, if RNA-Seq data is provided The distribution of consensus peaks within external features will be shown if external features are provided The distribution of consensus peaks within external features and genomic regions will be shown if external features are provided The distribution of consensus peaks which directly overlap a detected gene will be shown separated by external feature and genomic region Key Outputs Consensus peaks will be exported as output/&lt;ChIP_target&gt;/consensus_peaks.bed Oracle peaks will be exported as output/&lt;ChIP_target&gt;/oracle_peaks.rds 2.3 Differential Binding This step provides much of the uniqueness to the GRAVI workflow combining approaches from macs2(Zhang et al. 2008), qsmooth(Hicks et al. 2018), csaw(Lun and Smyth 2014), limma(Ritchie et al. 2015) and ihw(Ignatiadis et al. 2016) whilst relying heavily on the infrastructure provided by extraChIPs. A sliding window approach as advocated by Lun &amp; Smyth (2014) is the strategy used here. All two-factor comparisons of interest can specified via the YAML file (Section 5.1) with more complicated layouts specified as below contrasts: - [&quot;control&quot;, &quot;treat1&quot;] - [&quot;control&quot;, &quot;treat2&quot;] Differential binding analysis will be performed for every ChIP target where both treatment groups are found from each specified contrast. Figure 2.2: Overview of steps in the differential binding workflow. Primary R packages used for each step are indicated in brackets. Integration with differential expression results (RNA-Seq) is an option step only performed if RNA-Seq data is provided. Sliding Windows By default, sliding windows will be defined based on the estimated fragment length so that the window size is slightly wider than the fragment length (\\(w_\\text{size}\\)), and the step size is \\(w_\\text{step} = w_\\text{size} / 3\\). This usually leads to window sizes which are multiples of 30nt, e.g. 150, 180, 210, 240 etc. Alignments are initially counted across autosomes and sex chromosomes, explicitly excluding scaffolds and mitochondrial alignments, and discarding windows where the total number of alignments are \\(&gt;n-1\\), where \\(n\\) represents the total number of samples in the current analysis. Windows which are more likely to contain noise than true binding signal are then discarded using extraChIPs::dualFilter() in combination with the consensus peaks from Section 2.2. The set of consensus peaks is used as a guide for setting the inclusion/exclusion thresholds which are based on 1) Overall signal intensity and 2) Enrichment over input. Thresholds for each measure are defined such that the proportion \\(q\\) of windows which overlap a consensus peak are returned, with windows which pass both inclusion thresholds are returned. This parameter itself is set in config.yml as filter_q as described in Section 5.1. In general, values in the range \\(0.4 &lt; q &lt; 0.6\\) perform well as the sliding windows around the margins of the consensus peaks will be discarded at this point. Higher values will lead to large numbers of windows being retained which overlap peak margins and are relatively uninformative. Normalisation In order to accommodate ChIP targets which may vary considerably across treatments, such as in the case where the target is mainly cytoplasmic in one treatment group, logCPM values are used for differential binding analysis, after Smooth Quantile Normalisation(Hicks et al. 2018). Importantly, library sizes across the entire set of alignments are used for calculation of logCPM values as using only retained windows would introduce significant bias in low-signal samples. This strategy allows for normalisation both within and across treatment groups. Plots showing qsmooth weights, pre/post logCPM, pre/post RLE (Gandolfo and Speed 2018) and pre/post PCA are produced in this section of the workflow. Hypothesis Testing The limma-trend(Law et al. 2014) method is used for differential binding analysis, including all retained windows. Instead of a point-based Null Hypothesis (i.e. \\(\\mu = 0\\)) a range-based Null Hypothesis is the preferred approach(McCarthy and Smyth 2009). Under this approach, the Null Hypothesis would be \\[ H_0: -\\lambda \\leq \\mu \\leq \\lambda \\] with the alternate hypothesis being \\[ H_A: |\\mu| &gt; \\lambda \\] By default, the value \\(\\lambda = \\log_2(1.2)\\) is used, which denotes a 20% change in binding signal as the point where sites become of interest. This values is set in config.yml as the parameter fc (Default: fc = 1.2), and setting fc = 1 would return the statistical approach to be a point-based Null Hypothesis \\(H_0: \\mu = 0\\). After performing this statistical test, overlapping windows are merged taking the individual window with the highest signal as the representative window for the merged region. As this value is independent of the statistical test(Lun and Smyth 2014), the resultant set of p-values is FDR-adjusted using the Benajmini-Hochberg approach(Benjamini and Hochberg 1995), giving a set of FDR-adjusted p-values for all merged regions. Independent Hypothesis Weighting The Independent Hypothesis Weighting approach(Ignatiadis et al. 2016) suggests the a set of p-values can be partitioned by any independent variable, with weights assigned to each partition, and these weighted p-values can then be adjusted using conventional strategies, such as the FDR. Under the GRAVI workflow, four possibilities for partitioning the p-values obtained after merging regions are provided, and these can be specified in the ihw parameter of config.yml. The options are ihw: \"targets\" where consensus peaks from all other ChIP targets included in the larger GRAVI workflow are used to partition p-values. As consensus peaks are treatment-agnostic, these simply provide a scaffold defining the presence/absence of all other ChIP targets under any treatment condition, in combination across all ChIP targets. ihw: \"regions\" where previously defined genomic regions are used to partition the p-values ihw: \"features\" where any external features supplied are used for the partitioning ihw: \"none\" where no partitioning is performed and the standard FDR-adjusted p-values are used to determine differential binding status The default approach implemented by the IHW authors suggests that p-value partitions must be &gt; 1000, and as such, all the above approaches collapse smaller groups until the smallest group contains at least 1000 p-values (i.e. merged regions). In the case of ChIP targets which do not bind in a promiscuous manner, the IHW step may make minimal difference to the results. Assigning Genes To Windows After merging of neighbouring sliding windows, genes are assigned to each merged region. This is performed using annotated genomic regions, any external features and HiC data, via the function extraChIPs::mapByFeatures(). Under this approach: Regions which overlap a promoter are assigned to the genes associated directly with that promoter Regions which overlap an enhancer are assigned to all genes within 100kb Regions which overlap any HiC interactions are assigned to all genes connected by the interactions Regions with no assignment from steps 1-3 are assigned to all directly overlapping genes, or the nearest gene within 100kb If no HiC data is included, step 3 is not performed Presentation of Key Results The above steps essentially complete the detection of differentially bound regions and assignment of these to regulatory target genes. A series of visualisations are then provided including: MA &amp; Volcano plots Profile Heatmaps for sites with Increased/Decreased target binding Results summarised by chromosome Signal/logFC/differential binding partitioned by genomic region If external features are provided, the plots from step 4 are replicated using external features to partition results. A combined summary of the results by genomic region and external features is also included. A series of summary tables, along with the 200 most highly ranked regions are included. Results of differentially bound windows and the genes assigned to them are also exported as a CSV for sharing with collaborators. Genomic plots for unique regions based on signal strength (logCPM), changed binding (logFC) and statistical support (FDR) are also provided as part of the default output. Enrichment Testing Using the gene-sets and pathways specified in params.yml four enrichment analyses are performed using goseq(Young et al. 2010). Gene-width is used as an offset for biased sampling, as longer genes are more likely to have a peak mapped to them. These are Comparison of genes mapped to a site with bound target and genes which are not mapped to a target-bound site Comparison of genes mapped to a differentially bound site against genes mapped to a binding site, but with no differentially bound sites Comparison of genes mapped to a site with increased binding against genes mapped to a binding site, but with no differentially bound sites Comparison of genes mapped to a site with decreased binding against genes mapped to a binding site, but with no differentially bound sites All results are presented as searchable, interactive HTML tables including which genes from each pathway are mapped to the relevant set of bound regions RNA-Seq Data If results from a differential expression (DE) analysis are included, which can also be microarray results, a series of additional analyses are performed. Firstly, the relationship between detected genes and the genomic regions bound by the target are characterised. If external features are also provided, this is repeated for external features. P-values from DE analysis are partitioned by differential binding status. No further IHW is performed, but this can still provide a clear visual clue as to the relationship between differential target binding and differential gene expression. Given the unpredictability of an RNA-Seq dataset and the number of genes considered to be differentially expressed, bound and differentially bound windows are used as gene sets to perform GSEA(Korotkevich, Sukhov, and Sergushichev 2019) using sites directly, and sites partitioned by genomic region and external feature (if provided). GSEA is performed 1) taking direction of differential expression into account, 2) ranking genes purely by significance (i.e. without direction). Genomic regions for the 5 genes most highly ranked for differential expression, and with \\(&gt;1\\) target-bound window assigned to them are plotted. Finally, standalone GSEA results from the RNA-seq dataset (incorporating direction of change and all requested MSigDB pathways) are compared to enrichment (i.e. goseq) results for differentially bound regions. Any common pathways are given in an interactive HTML table Key Outputs Key output files produced by this step of the workflow are: Differential binding results (by window): output/&lt;ChIP_target&gt;/&lt;control&gt;_&lt;treat&gt;_differential_binding.rds Differential binding results (by gene): output/&lt;ChIP_target&gt;/&lt;ChIP_target&gt;_&lt;control&gt;_&lt;treat&gt;_differential_binding.csv.gz Retained windows after filtering: output/&lt;ChIP_target&gt;/&lt;control&gt;_&lt;treat&gt;_filtered_windows.rds Regions with increased target binding: output/&lt;ChIP_target&gt;/&lt;control&gt;_&lt;treat&gt;_up.bed Regions with decreased target binding: output/&lt;ChIP_target&gt;/&lt;control&gt;_&lt;treat&gt;_down.bed 2.4 Pairwise Comparisons By default, pair-wise comparisons are performed between all differential binding results. If ChIP target TF1 has samples in Control and Treat1, whilst ChIP target TF2 has samples in Control, Treat1 and Treat2, with comparisons being requested for Treat1 vs. Control and Treat2 Vs Control, the following pair-wise comparisons will be automatically performed: TF1 (Treat1 Vs Control) and TF2 (Treat1 Vs Control) TF1 (Treat1 Vs Control) and TF2 (Treat2 Vs Control) TF2 (Treat1 Vs Control) and TF2 (Treat2 Vs Control) Given the automated nature of the workflow, this represents the simplest approach and any redundant comparisons are simply able to be ignored by the user. Comparison of Peaks The pair-wise comparisons module initially compares consensus peaks between the two targets as a Venn Diagram, with the sets of four Oracle Peaks (i.e. treatment specific peaks) being compared using an UpSet plot. Comparison of Differentially Bound Windows Pair-wise comparison of two ChIP targets requires more nuance than simply looking for sites where both are changed. A universal set of windows is first obtained across all windows retained in both targets. These are then classified as Up, Down, Unchanged or Undetected for each ChIP target. Using both targets, the universal windows are then classified based on both targets. This is particularly important given the hypothesised role of ChIP targets which can act as pioneer factors(Zaret and Carroll 2011), or those which bind in complex and sequester other factors(Hickey et al. 2021). The combined behaviours of both ChIP targets is then compared directly, described by genomic region and external features (if provided). Distances between the windows with representative statistics (i.e. maximal signal) are determined where both targets are present. The combined changes in signal are then compared as a complete set for all windows where both targets are detected, as well as broken down by genomic region and external features. Enrichment Analysis The same gene-sets from MSigDB(Liberzon et al. 2015) as used previously are then used for enrichment testing, using genes as mapped to windows during previous steps. Enrichment testing again uses goseq with gene length as the biased-sampling term. Enrichment is performed at multiple levels: Genes Mapped To All Windows Genes mapped to either target Genes mapped to target 1 but not the second target Genes mapped to target 2 but not the first target Genes mapped to both targets Genes Mapped to Differentially Bound Windows All pair-wise combinations of Up/Down/Unchanged/Undetected are tested across both factors. If no enrichment is found, results are not presented. Combined Visualisations The genomic windows for which the two factors are present are visualised based on the combined strongest signal, and the combined largest change. Using only combinations of Up/Down/Unchanged, six windows for each are presented. As with all genomic visualisations, any coverage provided as an external track (e.g H3K27ac or ATAC-seq signal) will be added to all plots. Integration With RNA-Seq Results The set of genes mapped to each pair-wise combination of Up/Down/Unchanged/Undetected are then compared to the external DE results using GSEA incorporating direction of change, and overall significance. Along with barcode plots for the 9 most highly-ranked combined binding groups, genes in the Leading Edge for all significant combined-binding groups are also provided in the results table. References "],["quick-start.html", "Chapter 3 Quick Start Guide 3.1 Install Snakemake 3.2 Create the Directory Structure 3.3 Run the Pipeline", " Chapter 3 Quick Start Guide 3.1 Install Snakemake You will need a snakemake installation to begin. Please see here for help setting this up. If you are running the pipeline on an HPC and are unsure, please consult with your HPC support team about setting up snakemake on your specific cluster. Snakemake itself is in widespread use globally, so they should be able to provide the support you need. 3.2 Create the Directory Structure Create a new github repository on your account by going to the github template repository Download your new repository to your local server or HPC using git clone &lt;myrepository&gt; Place your bam files in the subdirectory data/aligned as described in section 4.2 These should be placed in separate directories for each target, such data/bam/target1 and data/bam/target2 Edit samples.tsv in the config directory as described in section 4.3 Modify any parameters in config/config.yml 3.3 Run the Pipeline 3.3.1 Run On A Local Server To run using 16 cores without any queuing system (e.g. on a local machine), enter the following snakemake -p --use-conda --notemp --keep-going --cores 16 3.3.2 Run On An HPC Please consult with your local support team for their advice running a snakemake workflow. In essence, the above command will need to be provided to your queuing system through the preferred strategy. "],["input-files.html", "Chapter 4 Input Files and Directories 4.1 Directory Structure 4.2 Alignments 4.3 Sample Descriptions 4.4 Additional Files", " Chapter 4 Input Files and Directories 4.1 Directory Structure The GRAVI workflow requires a set directory structure. If using the template repository, as advised, this will be mostly taken care of. The required directory structure is project_home/ ├── analysis ├── config ├── data ├── docs ├── output └── workflow Rmarkdown scripts will be added and executed from the analysis directory Key configuration files are provided in the config directory Your data should be placed in the data directory as described below The html output summarising all results will be produced in the docs directory Additional output files will be placed in output The workflow itself is run by all code supplied in the workflow directory 4.2 Alignments The GRAVI workflow currently takes bam files as the primary input. Multiple workflows exist for quality control, adapter removal and de-duplication and it is assumed that supplied reads will have been pre-processed with the above steps, then aligned to the genome of interest. Files should be placed in the data/aligned directory as set in config.yml, although this can be changed if desired. Each ChIP target should be placed in a separate directory using the example layout as given below. As IgG input may be shared between ChIP targets, these can all be placed in the directory data/Input and this is hard-wired into the workflow. project_home/ └── data └── aligned ├── TF1 │ ├── control_rep1.bam │ ├── control_rep2.bam │ ├── control_rep3.bam │ ├── treat_rep1.bam │ ├── treat_rep2.bam │ └── treat_rep3.bam ├── TF2 │ ├── control_rep1.bam │ ├── control_rep2.bam │ ├── control_rep3.bam │ ├── treat_rep1.bam │ ├── treat_rep2.bam │ └── treat_rep3.bam └── Input └── pooled_input.bam 4.3 Sample Descriptions The file samples.tsv defines the set of files which the workflow will be applied to. Any files placed in the data/aligned directory, but not specified in this file will be ignored. The desired layout should be a tab-delimited file (i.e. tsv). These can be generated using Excel, Notepad++, R, Visual Studio, or any other software you are comfortable with. A brief example would follow the layout sample target treat replicate input control_rep1 TF1 Control 1 pooled_input control_rep2 TF1 Control 2 pooled_input control_rep3 TF1 Control 3 pooled_input treat_rep1 TF1 Treatment 1 pooled_input treat_rep2 TF1 Treatment 2 pooled_input treat_rep3 TF1 Treatment 3 pooled_input 4.3.1 Required columns This file must contain all four of the columns sample, target, treat, input, in any order. If supplied, optional columns such as replicate, passage etc can be referenced in the workflow. As well as defining all required steps for the workflow, labels for plots will be generated from combinations of these columns. sample: This must be identical to the filename, but without the bam extension. target: This must be the directory name within data/aligned which contains the sample treat: This is used to define all comparisons input: All files must correspond to a file in data/aligned/Input but without the bam suffix. Each sample can have a separate input sample, or input samples can be shared across all or some of the samples. 4.3.2 Optional Columns Any additional columns can be used to denote batches, or passages if running a nested/paired model. These column names will be automatically detected at the appropriate steps of the workflow and incorporated into figures and tables. Common column names may be replicate or passage (for cell lines) 4.4 Additional Files Additional, optional files can also be supplied and is it customary to place these in data/external with paths (relative to project_home) added to config.yml. Names can be any informative name chosen by the user. project_home/ └── data ├── aligned │ ├── TF1 │ ├── TF2 │ └── Input └── external ├── rnaseq_topTable.tsv ├── external_features.gtf ├── hic_interactions.bedpe ├── additional_coverage_control.bw └── additional_coverage_treat.bw 4.4.1 RNA-Seq Files provided with differential expression analysis results from a relevant RNA-Seq experiment should follow the layout as produced by topTable() from the limma package(Ritchie et al. 2015). Gene IDs should match those in the Gencode GTF (Ensembl IDs) and should be contained in a column called gene_id. Additional expected columns will be logFC and FDR or similar names which could be reasonably found by regex matching within the workflow. 4.4.2 External Features These must be provided as a GTF which can be prepared by any method. The feature types should be defined in a field named feature. Non-overlapping features are optimal but not essential, and this is left to the users discretion. For example, if providing features such as enhancers and super-enhancers(Whyte et al. 2013), it may be more sensible to provide these as mutually exclusive groups. 4.4.3 HiC Interactions Significant interactions can be sourced using any methodology, however these must be provided in bedpe format. 4.4.4 External Coverage Additional coverage files should be provided in bigwig format. References "],["editing-yaml.html", "Chapter 5 YAML Configuration Files 5.1 The Main Configuration: config.yml 5.2 Colour Schemes: colours.yml [#colours-yml] 5.3 Additional Parameters: params.yml 5.4 HTML Settings: rmarkdown.yml", " Chapter 5 YAML Configuration Files All YAML files which ruin the workflow are located in the project_home/config directory. The standard YAML structure is used in all files with the primary objective being passing workflow parameters to the various steps of the workflow. There are four files which control various aspects: config.yml, colours.yml, params.yml and rmarkdown.yml 5.1 The Main Configuration: config.yml This file sets many of the primary parameters and is the file which will need editing for any new dataset. Many settings should remain unchanged as changing default locations of files may lead to unexpected instability in the workflow, whilst other setting should be changed, such as those which determine which comparisons to perform. This is the only file parsed directly by snakemake and subsequent rules, whilst all others are used to pass parameters to R environments. An example layout of config.yml might be: samples: file: &quot;config/samples.tsv&quot; paths: bam: &quot;data/aligned&quot; bigwig: &quot;data/bigwig&quot; macs2: &quot;data/macs2&quot; genome: build: &quot;GRCh37&quot; gencode: &quot;33&quot; external: rnaseq: &quot;data/external/results.tsv&quot; features: &quot;data/external/h3k27ac_features.gtf&quot; hic: &quot;data/external/encode_hic.bedpe&quot; coverage: H3K27Ac: control: &quot;data/external/H3K27Ac_control.bw&quot; treat: &quot;data/external/H3K27Ac_treat.bw&quot; comparisons: fc: 1.2 fdr: 0.05 paired: false filter_q: 0.6 contrasts: - [&quot;control&quot;, &quot;treat&quot;] ihw: &quot;regions&quot; peaks: macs2: gsize: &quot;hs&quot; fdr: 0.05 keep_duplicates: &quot;all&quot; qc: min_prop_peaks: 0.1 min_prop_reps: 0.3 Settings Which Don’t Need To Be Modified In general, the paths to key files don’t need to be changed and default configurations are well tested. Whilst varying these has been intermittently attempted successfully, unexpected instability may occur and as such, is discouraged. samples: (Default: “config/samples.tsv”) By default, the file which contains all sample-level information is defined as config/samples.tsv. In theory, this can be changed but this may adversely impact the pipeline. paths: bam: (Default: “data/aligned”) Alignments should be placed in data/aligned as advised in section 4.2, although this can be changed to data/bam or any other relative path as desired. Again, changes to the default layout may adversely affect the pipeline stability macs2: (Default: “data/macs2”) Output from macs2 callpeak will be placed in this directory, mirroring the input structure from data/aligned where each ChIP target (e.g. TF1, TF2) will have results written to separate directories. bigwig: (Default: “data/bigwig”) After running macs2 callpeak, bedGraph files will be converted to the more space efficient bigwig files. The directory structure from both data/aligned and data/macs2 will again be mirrored such that each ChIP target has all samples written to the same directory Settings Which Should Be Modified genome: Specify the genome build used for alignments and for gene annotations. Build must match that used exactly for performing alignments. The gtf corresponding to the specified Gencode release will be downloaded as part of the workflow external: Provide paths to all optional data files here. Only files provided will be included in the workflow. rnaseq should be the results as output by limma::topTable() or similar. Gene IDs should match those provided in the Gencode GTF (e.g. Ensembl IDs) and these should be in a column names gene_id. Columns such as logFC and FDR will be searched for during the workflow using regular expressions to find the best match. Can be in csv or tsv format. Excel-specific (xls, xlsx) formats are not supported. features can be determined by any method, with common choices being relevant histone marks, or promoters, enhancers and super-enhancers determined by H3K27ac marks. Features should be non-overlapping with the field feature defining the different feature types. Must be provided in GTF format. hic HiC interactions must be provided as a bedpe file coverage Tracks provided in this argument will be added to all genomic plots showing binding peaks or differential binding. Multiple files provided within each YAML list element will be overlaid as a single track. There is no upper limit to the number of tracks, however more tracks generally detract from an informative figure. comparisons: These settings determine how the differential binding analysis is performed. fc (Default: 1.2) The setting of 1.2 indicates a 20% change in binding as the threshold below which we are not interested, or below which we consider binding changes to be inconsequential. This parameters is passed to limma::treat() (McCarthy and Smyth 2009) in all differential binding analyses. fdr (Default: 0.05) Windows with significance below this threshold are considered to provide supporting evidence of differential binding. paired (Default: false) If set to true the values in the optional column (e.g. replicate, passage etc.) are used to perform a paired analysis as described in the limma manual filter_q (Default: 0.6) Passed to extraChIPs::dualFilter(). When filtering (i.e. discarding) genomic sliding windows which are unlikely to contain true binding signal, determine thresholds which will retain this proportion of windows which overlap a peak identified by macs2 callpeak. contrasts: Define all contrasts for differential binding. Any ChIP target containing both treatment groups will be included for differential binding. Values must match those in the treat column of samples.tsv. Each differential binding analysis will be performed using the limma-trend method in the context of A vs B, such that complex models are not supported. Use new YAML list elements to define additional contrasts ihw (Default: “regions”) Options used to stratify p-values for Independent Hypothesis Weighting(Ignatiadis et al. 2016) of differential binding results. Can take values \"regions\", \"features\", \"targets\" or \"none\" \"regions\" P-values will be stratified by annotated genomic regions as determined in the initial steps of the workflow \"features\" P-values will be stratified by provided external features \"targets\" P-values will be stratified by the presence of a macs2 consensus peak using all other ChIP targets in combination \"none\" No Independent Hypothesis Weighting will be performed on the results from differential binding peaks: macs2 settings are passed to macs2 callpeak. Only the arguments gsize, fdr and keep_duplicates are accepted. Please see the macs2 manual for more detailed explanations. qc parameters are used for determining if samples are of a high enough quality, and how to determine consensus/oracle peaks for each target and treatment group. min_prop_peaks: (Default: 0.1) Samples within a treatment group must contain more than this proportion of peaks which overlap peaks from the “best” sample within the relevant treatment group, i.e. the sample with the most number of peaks identified by macs2 callpeak. This is an inclusive threshold which will only discard clearly poor samples, which themselves are more likely to occur in tissue/organoid than in cell-line derived data. min_prop_reps (Default: 0.3) When forming oracle peaks within each target and treatment group, peaks must be represented in at least this proportion of samples. This defaults to 0.3 which would equate to 1 of 3 samples, 2 of 4 samples etc. This value may need to be altered pending the results of a complete run after Quality Assessment has performed. 5.2 Colour Schemes: colours.yml [#colours-yml] Defines all plotting colour schemes for consistency throughout the entire workflow. Colours can be any standard colours able to be interpreted by R, such as 'blue' or '#0000FF'. Recommended YAML list elements are qc, regions, direction and treat. Any unspecified colours will be automatically assigned and will propagate through the workflow. As is standard across most programming languages, names are case-sensitive. An example file is given below: qc: pass: &quot;#0571B0&quot; fail: &quot;#CA0020&quot; direction: up: &quot;#CA0020&quot; down: &quot;#0571B0&quot; unchanged: &quot;#7F7F7F&quot; undetected: &quot;#E5E5E5&quot; regions: promoters: &#39;#FF3300&#39; upstream: &#39;#E1EE05&#39; exons: &#39;#7EDD57&#39; introns: &#39;#006600&#39; proximal: &#39;#000066&#39; distal: &#39;#551A8B&#39; treat: Input: &quot;#33333380&quot; control: &quot;#4D4D4D&quot; treat: &quot;#C53270&quot; features: promoter: &quot;#FF4500&quot; enhancer: &quot;#FFFF00&quot; super_enhancer: &quot;#FFC34D&quot; no_feature: &quot;#E5E5E5&quot; 5.3 Additional Parameters: params.yml Default settings for defining initial annotations and enrichment testing. In general, these will not need to be changed, but can be if required. Parameters for msigdb(Liberzon et al. 2015) are passed to msigdbr(Dolgalev 2022) and fields should match this layout. Any categories passed to gs_cat will lead to all subcategories being used from that category. Specific sub-categories of larger databases can be passed using gs_subcat element. gene_regions: promoters: upstream: 1500 downstream: 500 upstream: 5000 intergenic: 10000 msigdb: gs_cat: &quot;H&quot; gs_subcat: - &quot;CP:KEGG&quot; - &quot;CP:REACTOME&quot; - &quot;CP:WIKIPATHWAYS&quot; - &quot;TFT:GTRD&quot; 5.4 HTML Settings: rmarkdown.yml The main workflow will produce a compiled set of HTML pages using rmarkdown::render_site()(Allaire et al. 2022). The two available fields to supply here are: knitr_opts which are passed to knitr::opts_chunk$set()(Xie 2022) at the beginning of every compiled Rmarkdown document, and rmarkdown_site which determines the layout and style of the final HTML report. All left elements of the navbar are determined automatically during the workflow and will be ignored if supplied here, whilst all other parameters are passed via the file _site.yaml which will be generated during the workflow. knitr_opts: echo: TRUE message: FALSE warning: FALSE dev: [&quot;png&quot;, &quot;pdf&quot;] fig.align: &quot;center&quot; fig.width: 10 fig.height: 8 rmarkdown_site: name: &quot;GRAVI: Gene Regulatory Analaysis&quot; output_dir: &quot;../docs&quot; navbar: title: &quot;GRAVI&quot; right: - icon: fa-github href: &quot;https://github.com/steveped/GRAVI&quot; output: html_document: toc: yes toc_float: yes code_folding: hide self_contained: false theme: sandstone highlight: textmate includes: after_body: footer.html References "],["references.html", "References", " References "]]
