import pandas as pd
import os
import re
import subprocess
import urllib
import sys
import random
import itertools
import yaml
import hashlib

configfile: "config/config.yml"

## Figure out how to run check_yaml from here if possible
## python scripts/check_yaml.py

## Set the here file as defined by here::here() for Rmarkdown files
## In a valid Rproj file is found, use that. Otherwise use .here
def get_here_file():
	wd = os.getcwd()
	rproj = os.path.basename(wd) + ".Rproj"
	rproj_path = os.path.join(wd, rproj)
	here_file = os.path.join(wd, ".here")
	if os.path.isfile(rproj_path):
		## Check contents of file for Version in line 1
		with open(rproj_path) as f:
			ln = f.readline().rstrip()
		if 'Version:' in ln:
			here_file = rproj_path
	return(here_file)

####################################
## Check all external files exist ##
####################################
for i in config['external']:
	f = config['external'][i]
	if type(f) == str:
		msg = "File " + f + " not found"
		assert (os.path.isfile(f)), msg
	if type(f) == dict:
		for j in f:
			for k in f[j]:
				msg = "File " + f[j][k] + " not found"
				assert(os.path.isfile(f[j][k])), msg
			
		
	


# Define all contrasts
# x will be config['comparisons']['contrasts']:
def make_contrasts(x):
	ret_val = []
	for comp in x:
		ref = comp[0]
		tgt_ref = set(df['target'][df['treat'] == ref])
		treat = comp[1]
		tgt_treat = set(df['target'][df['treat'] == treat])
		comp_tgts = list(tgt_ref.intersection(tgt_treat))
		for t in comp_tgts:
			ret_val.extend([t + "_" + ref + "_" + treat])
	return(ret_val)


def make_pairwise(x):
	ret_val = []
	all_cont = make_contrasts(x)
	all_cont.sort()
	all_pairs = list(
		itertools.combinations(all_cont, 2)
	)
	for p in all_pairs:
		ret_val.extend([p[0] + "_" + p[1]])
	return(ret_val)


max_threads = workflow.cores

####################
## Define Samples ##
####################
df = pd.read_table(config['samples']['file'])

## Now set all values as required
samples = list(set(df['sample']))
targets = list(set(df['target']))
treats = list(set(df['treat']))
inputs = list(set(df['input']))
pairs=make_pairwise(config['comparisons']['contrasts'])

wildcard_constraints:
	target = "(" + '|'.join(targets) + ")",
	sample = "(" + '|'.join(samples) + ")",
	treat = "(" + '|'.join(treats) + ")",
	ref = "(" + '|'.join(treats) + ")"

###############
## Key Paths ##
###############
here_file = get_here_file()
bam_path = config['paths']['bam']
rmd_path = "analysis"
annotation_path = os.path.join("output", "annotations")
diff_path = os.path.join("output", "differential_binding")
macs2_path = os.path.join("output", "macs2")
log_path = os.path.join("workflow", "logs")


#################
## Figure Type ##
#################
rmdconfigfile = "config/rmarkdown.yml"
rmd_config = yaml.safe_load(open(rmdconfigfile))
fig_type = rmd_config['knitr_opts']['dev']
if type(fig_type) is list:
	fig_type = fig_type[0]


###############################
## External Annotation Files ##
###############################
## These are required input for multiple steps
gtf = config['external']['gtf']
blacklist = config['external']['blacklist']
chrom_sizes = os.path.join(annotation_path, "chrom.sizes")

##################################
## Hash for updating extraChIPs ##
##################################
rmd_hash = hashlib.md5(open('workflow/envs/rmarkdown.yml', "rb").read()).hexdigest()

#################################
## Differential Binding Method ##
#################################

# Currently LibSize + QuasiLikelihood (ls-ql) or 
# SmoothQuantile + Limma-Trend (sq-lt)
db_method = config['comparisons']['method']

#####################
## Prepare Outputs ##
#####################
ALL_OUTPUTS = []

#####################################
## Annotations Defined in worfklow ##
#####################################

## These are dependent on H3K27Ac being a target. If so, promoters, enhancers
## and super-enhancers will be created. If not, only the tss regions will be
## created
ALL_RDS = expand(
	os.path.join(annotation_path, "{file}.rds"),
	file = [
		'colours', 'gene_regions', 'seqinfo', 'trans_models','tss', 'gtf_gene',
		'gtf_transcript', 'gtf_exon'
	]
)
ALL_OUTPUTS.extend(ALL_RDS)

#######################
## Rmarkdown Outputs ##
#######################
HTML_OUT = expand(
	os.path.join("docs", "{file}.html"),
	file = ['annotation_description']
)

## Macs2 Summaries
HTML_OUT.extend(
	expand(
		os.path.join("docs", "{target}_macs2_summary.html"),
		target = targets
	)
)

## Differential Binding
HTML_OUT.extend(
	expand(
		os.path.join("docs", "{cont}_differential_binding.html"),
		cont = make_contrasts(config['comparisons']['contrasts'])
	)
)

## Pairwise Comparisons: Only if required
if pairs:
	HTML_OUT.extend(
		expand(
			os.path.join("docs", "{comp}_pairwise_comparison.html"),
			comp = pairs
		)
	)


ALL_OUTPUTS.extend(HTML_OUT)
## Keep the final index separate for easiers passing to other rules
ALL_OUTPUTS.extend([os.path.join("docs", "index.html")])

## Peaks generated from the Rmd files
CONS_PEAKS = expand(
	os.path.join(macs2_path, "{target}", "{target}_{file}"),
	target = targets,
	file = ['union_peaks.bed', 'treatment_peaks.rds']
)
ALL_OUTPUTS.extend(CONS_PEAKS)


###########################
## Peak Files from macs2 ##
###########################
INDIV_PEAKS = expand(
	os.path.join(macs2_path, "{sample}", "{sample}_peaks.narrowPeak"),
	sample = samples
)
ALL_OUTPUTS.extend(INDIV_PEAKS)
df['merged_pre'] = df[['target', 'treat']].agg('_'.join, axis = 1)
merged_pre = set(df[['target', 'merged_pre']].agg('/'.join, axis = 1))
MERGED_PEAKS = expand(
	os.path.join(macs2_path, "{pre}_merged_peaks.narrowPeak"),
	pre = merged_pre
)
ALL_OUTPUTS.extend(MERGED_PEAKS)


##################
## BigWig Files ##
##################
INDIV_BW = expand(
	os.path.join(macs2_path, "{sample}", "{sample}_treat_pileup.bw"),
	sample = samples
)
ALL_OUTPUTS.extend(INDIV_BW)
MERGED_BW = expand(
	os.path.join(macs2_path, "{path}_merged_treat_pileup.bw"),
	path = merged_pre
)
ALL_OUTPUTS.extend(MERGED_BW)
FE_BW = expand(
	os.path.join(macs2_path, "{path}_merged_FE.bw"), path = merged_pre
)
ALL_OUTPUTS.extend(FE_BW)

rule all:
    input:
        ALL_OUTPUTS

include: "rules/samtools.smk"
include: "rules/rmarkdown.smk"
include: "rules/macs2.smk"
include: "rules/bigwig.smk"
include: "rules/annotations.smk"
include: "rules/differential_binding.smk"
include: "rules/pairwise_comparisons.smk"
